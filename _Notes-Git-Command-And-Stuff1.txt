
  ===============================================
  #     Tips and Tricks
  ===============================================
  - how to capture menu/popups in Snip and Sketch 
      - click dropdown next to new  and select screen delay of 3 or 10 secs.
      - Snip and Sketch will be ready after the 3 or 10 secs. It will be ready when window turns gray
      - When window turns gray click the menu and start capturing 
      


  ===============================================
  How to Create a Devops Project 
  ===============================================
  ===============================================
  How To Add New VS Solution to a Devops (Formerly VSTS) Project 
  ===============================================
    - navigate to a project (ex. Securing Azure App)
    - on to top of the menu bar click create a repository. or click Plus Sign --> New Repository
      or for newly created project --> click Plus sign next to project name
    - enter repo name "AddressBookPlusAfterMSI"
    - click create 

    - then  go to Visual Studio -> Team services --> Manage Connection 
      --> Connect to the project (select the repo you created in devops in this case MyAddressBookPlusafterMSI)
      --> a dialog pops up
      --> Click browse Path button (located in the lower right corner ofthe dialog) 
      --> navigate to C:\localdev (my folder containing all apps checked in to Devops)
      --> then click "Make New Folder"  name it "AddressBookafterMsi" 
      --> click ok to create folder 
      --> click "Clone" in the dialog box

    - navigate to the folder that you just created (at this point it is already  git repository)
     (copy and existing solution if that's what you want )
     or run Visual studio as administrator and create a new project

    - After successfully creating the project check it in

   How to see list of Visual Studio Projects in a Devops Project 
     - Click devop project (e.g. MyProject)
     - click "Repos" on the left navbar 
     - click dropdpwn in the menu bar (next to search box)

===============================================================================
   GIT - DISTRIBUTED VERSION CONTROL
==================================================================================
How to add sources to existing repository:

1. using command prompt navigate to location of the your VS project (where .sln file is located

2. do "git init"

3. do - git remote add origin https://mydotfoods.visualstudio.com/SourceControlDemo/_git/dev1-Api-Core
  
4. create a git ignore file by going to:
       https://github.com/github/gitignore/blob/master/visualstudio.gitignore

5. do git add .gitignore

5. do git commit -m "git ignore"

6. git commit -m "Initial Commit"

7. do a push in Visual Studio --> Sync -- Push or in Command Prompt

=======================================================
How to create a development branch
1. open command prompt and navigate to folder containing .sln
   Ex. cd C:\_dev1-Api-Dockx\NetCoreApi-Dockx\Validation-And-Logging

2. Execute the following command:
    git checkout -b development //create a local branch called "development"
    git push origin development //push the new branch into the server

3. go to VSTS. Select Code --> Branch to see brance you just created.

=======================================================
How to create a feature branch
1. Bring up the cloned visualstudio Solution
2. Go to DevOps and click the active repository Ex. demo-git-repo
3. Right click "Development" branch or "Master" if no developmemt branch
   and select "New Local Branch" --> enter name of branch in the dialog 
   (for example Branch-A) and then check "Checkout Branch" checkbox. 

4. Click "Create Branch" button to create the branch

5. Double click the created branch to make it the active branch.
   In the lower right corner of Visual Studio you should see the name of the
   repository and the active branch. Example:
      "demo-git-repo"  "Branch-A"

6. Next right click the newly created branch and select "Push Branch"
   so that the branch will be copied in "remotes/origin" . Expand
   remotes/origin to see "Branch-A" the branch you just created.

7. Note: To delete the branch, delete the branch in the "remotes/origin"
   folder in Team Explorer --> right click -- > "delete branch from remote"

   To verify it is deleted in remote, go to DevOps --> code --> Branches

   

=======================================================
How to save changes to files under a given branch. 
You can do this as many times you want. When you are satisfied with
the changes save them in Gitby doing COMMIT.

1. double click the branch to make it the current branch
2. Make your changes (as many times you want). When you are satisfied,
   do a commit. 
3. Go to Team Explorer ---> click the "House" icon
4. Select "Changes" button 
5. You will see the list of files you changed.
5. Optional: If you want to associate a work item in this
   commit --> click "Plus" sign under "Related WOrk Items" -->
   enter ID of related work item and click --> "Add"

6. Finally enter comments and click "Commit All"

   To make the changes you made to the files available to 
   the server, do the following:
      - go to Team Explorer --> House Icon --> Sync
      - select "Pull" or "Fetch" and then "Pull" under "Incoming Commits"
      - fimally click "Push" under "Outgoing Commits" to complete te sync

===========================================================
Doing a PULL request.
After doing a Commit, Sync and Push for the branch you changes are now
in the server. Do a pull request to ask somebody to review your code:

To create  a "Pull Request" 
1. Go to VSTS --> Code --> Pull Requets
2. Select "New Pull Request" button
3. Select the branch from the dropdown box
4. Select the branch want to merge into from the dropdown box:
     Master or Development
5. Enter "Title" and description
6. Under "Reviewers" select the name of the programmer 
   you want to review your code
  
7. Search for work item related to this Pull Request.
8. Click Create
   (Below the create button. You will see the changes you made in each file.)


================================================================
You can review comments made on your PULL request by going to VSTS Project page.
Once all changes are approved
   
==================================================================================================
*                        
==================================================================================================

1. Creating Branch in Visual Studio:
    - bring up the clones VS Solution
    - click "Active Repository" in Team Explorer
    - right clcik "master" and select "New Local Branch From" (in this case "master") give it a name like "UpdSubModelVerbiage"
    - Click "Create"
    - Double click the newly created branch so that changes you make will recorded under this branch.
      You should see the selected branch opposite the active repositiory like this:
          Example:
             Apd.Vis.UI (UpdSubmodelVerbiage)

    
    CREATING BRANCH IN THE WEB: https://www.visualstudio.com/en-us/docs/git/create-branch
        - from team project select the "Code" view. MAKE SURE YOU ARE WORKING WITH THE RIGHT REPO (EX. Apd.Vis.UI, Apd.Vis.Web)
        - click "Branches"
        - select the "New Branch" button
        - in the "Create Branch" dialog enter:
            - name of new branch you want 
            - in the dropdown box select based on: select "master"
            - in the "WorkItems to link" dropdown, select the appropriate work item.
            - click "create Branch" button

        - then go to Visual Studio Team Explorer
            - select origin/master and do a fetch. This will bring the branch to your origin/remote
            - double click the new branch you created in the web in order to copy it in your local repositiory

        - then go to local repo and double click it (THIS WILL MAKE THE NEW BRANCH AS THE CURRENT BRANCH)





2. Make changes to your file

   - if you want to see the files affected by yourchanges, click on home icon and select "Changes"

3. SAVE CHANGES (YOU CAN DO THIS AS MANY TIMES AS YOU WANT). When you are satisfied with the changes, save them in 
   Git by doing a "Commit".  To do that, do the following:
    - Click Home --> Changes  
    - right click the files and  select " Staged"
    - Enter description of changes
    - then click "Commit Staged"

4. SHARING YOUR CHANGES:
    - CLICK "Home" icon
    - select "sync"
    - select "Push"

5. OPEN PULL REQUESTS AND CLICK "NEW PULL REQUEST"
    - select the local source branch ex. UpdSubmodelVerbiage
    - Verify the remote branch to to MERGE into. (Is it Default Brance or Master???)
    - enter change description
    - click "Create"

6. YOU CAN REVIEW COMMENTS MADE ON YOUR PULL REQUEST BY GOING TO THE Visual Studio Team Project page.
   Omce all changes are approved by the team, DO A PULL REQUEST


7. SYNC WITH OTHERS:
    - This the process of getting changes from others to keep your code up to date. You pull commits
      made by others and merge them into your branch.
    - sometimes you might get "Merge Conflict" which you need to resolve "manually" or automatically"

    - STEPS IN SYNCHRONIZATION:
        - CLICK  "SYNC"
        - you will see list of incoming commits
        - click "pull" or Fetch" - not SURE

================================================
#  Native Git Commands
================================================

1. cloning and pushing:
     - git clone (paste the clone ou copied in the portal) or 
       git clone https://github.com/joeeames/psangulartestingcourse.git  mydirectoryofchoice

       git status 

     - after adding files to the repo: 
       git status 
       git add . 
       git commit -m "Source Code added" 
  
       git branch -M main
       git push -u origin 
       
2. Deploying an App to Git Repo 
    - go to ctagayun@github.com 
    - create a repo. For example: ctagayun/dotnet-core-Api

    - create a target directory example: mydotnet-core-api 
    - cd C:\_00-Courses-ARM-and-Sample-Powershell-Scripts\Tutorial-Authenticate-Authorize-Users-End-To-End
        \my-dotnet-core-api
      
    - go to https://github.com/ctagayun/dotnet-core-api
    - click "Code" --> Clone --> https and click copy icon on the right
   
    - then on the directory my-dotnet-core-api do:
         paste https://github.com/ctagayun/dotnet-core-api.git and add git clone in front of it
       
       git clone  https://github.com/ctagayun/dotnet-core-api.git  ain windows command prompt
       cd dotnet-core-api

       do a "git status" you should get a response "Nothing to Commit" 
 
    - again navigate to dotnet-core-api directory and populate it or create a new VS project 
      in this case I am just copy the and existing project from a folder named: dotnet-core-api

    - bring up dotnet-core-api from my-dotnet-core-api and test 

    - now deploy the repo to https://github.com/ctagayun/dotnet-core-api

 3.create a new repository on the command line
      Step1: go to github and create a repo called:  DemoCT91-UserAuth-FrontEndApp
      Step2: create a directory: md DemoCT91-UserAuth-BackEndApp and navigate to the new directory:     
              cd "C:\_AMainDemos\DemoCT91-Authenticate-Authorize-Users-End-To-End-V2\DemoCT91-UserAuth-BackEndApp"
      Step3: Initialize the directoryt
             git init
      Step4: Create and add README.md file 
            echo "# DemoCT91-UserAuth-FrontBackEndApp" >> README.md
            git add README.md 

      Step5: copy more source to the directory as necessary then do:
            git add .
            git commit -m "First Commit"
            git branch -M main
            git remote add origin https://github.com/ctagayun/DemoCT36-Securing-Netcore6.0-M3-M4-M5-FullDemo
            git push -u origin main
           
3.  Deploying an App to Git Repo From Visual Studio 2022
    Ref: Github https://docs.microsoft.com/en-us/visualstudio/version-control/git-create-repository?view=vs-2022

       - Open Visual Studio, and then select Create a new project.

       - from the main menu --> Git --> Create Git Repo --> Push your code to Github

       https://github.com/ctagayun/DemoCT36-Securing-Netcore6.0-M3-M4-M5-FullDemo.git


4. …or create a new repository on the command line
echo "# robinreactcoursefiles" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/ctagayun/robinreactcoursefiles.git
git push -u origin main


…or push an existing repository from the command line
git remote add origin https://github.com/ctagayun/robinreactcoursefiles.git
git branch -M main
git push -u origin main

5. How to switch/create github branch in VSCode
    - Access the "Source Control" tab on the left side of VSCode
    - Click on the "three small dots" next to the refresh button
    -  Click on the "Checkout to..." option
    -  Choose the branch you want to switch to

    - https://www.google.com/search?q=where+is+the+branch+indicator+in+vscode&oq=where+is+the+branch+indicator+in+vscode+&gs_lcrp=EgZjaHJvbWUyCQgAEEUYORifBTIHCAEQIRigATIHCAIQIRigATIHCAMQIRigATIHCAQQIRigATIHCAUQIRigATIHCAYQIRifBTIHCAcQIRifBTIHCAgQIRifBTIHCAkQIRifBdIBCTEzNTIwajBqN6gCALACAA&sourceid=chrome&ie=UTF-8#kpvalbx=_NLQvZrfMC7nBp84PlvycwAo_32