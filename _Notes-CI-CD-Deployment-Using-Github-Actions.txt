
Continuous delivery using Github Actiosn:
   https://learn.microsoft.com/en-us/azure/azure-functions/functions-how-to-github-actions?source=recommendations&tabs=dotnet
  
 Managing Microsoft Azure App Service Plan
 by Neil Morrissey
  https://app.pluralsight.com/library/courses/microsoft-azure-app-service-plan-managing/table-of-contents


(1) CI/CD Deployment Using GitHub Actions
        Demo Pluralsight: https://app.pluralsight.com/course-player?clipId=8fce0d8c-79b2-4648-8a25-ee3debb8653d

       See The demo for the CI/CD is PSWebApp located in           
            "C:\Courses-AppServices\AppService-Managing-AppService-Plan-MorriseyFeb2021-Upd\
                M3-PSWebApp-Publish-Using-Git-Action"

       In this demo we will use GitHub Actions to set up CONTINUOUS DEPLOYMENT TO APP SERVICE. The first thing I need to 
    do is add this project to my local Git repo, so I'll click on Add to Source Control, and now a master branch has been created 
    in my local Git. Now let's publish this to GitHub. And I already have an account in GitHub, and I've used it recently in 
    Visual Studio, so I'm already logged in. This project doesn't exist in GitHub yet, but it will get created when I click Publish. 
    It can take a few seconds, so I'll speed things up a bit. And now it says the repository was created successfully. 
    
    1. CONFIGURE A GITHUB ACTIONS WORKFLOW FILE
          So let's go to the browser. I have GitHub open, and I'm already logged in. So let's browse to the project by appending 
      my organization name and then the project name. And here are the files we just pushed up from Visual Studio. On the Actions tab, 
      this is where you can configure a GitHub Actions workflow file, which is just a YAML file that goes in a certain directory 
      in your project. 

         You can do that manually inside GitHub and authorize GitHub to push changes to Azure App Service. 
      But an EASIER WAY IS TO HAVE AZURE APP SERVICE CONFIGURE THE GITHUB ACTIONS for you.
       
         (1) So let's go to App Service  the App Service I want to publish to for example:  DemoConferenceApi 
          You can do this from any deployment slot that you want to publish to. It's a good idea to use a staging slot actually. 
      
         (2) Let's navigate to Democt7-api-rg -->DemoConferenceApi --> Deployment Center --> Settings

                Under Source dropdown: select Github
                Under Organization: ctagayun 
                Repository: DemoCT7-Conference.API-With-Swagger-Working
                Branch: Master
                Configure Runtime Stack: NetCore 3.1 
                ...
                Click Preview File --> then Save

         (3) Now lets go back to Github
               - navigate to ctagayun/DemoCT7-Conference.API-With-Swagger-Working
               - you will note that a folder .github/workflows is added
               - open .github/workflows you will see a file named "master_democonferenceapi.yml" that Azure 
                 appservice created for us. This is the GITHUB ACTION WORKFLOW FILE. 

               - you can edit the yml file or you could create this file yourself from scratch. Below is the entry 
                 where you can store the secret is the authorization key that allows github to push code to your app service. 
                 In this case "DemoConferenceApi"

                   publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_74F938EFB9734C9AA29C9BE504DFE3C4 }}

         (4)  Now let's go up to the Settings tab --> Scroll down and click "Secret. You will see the secret here.
          You can edit or change the value (but dont forget to update the yml file).

         (5) Now let's go to the Action tab. You will see that the workflow that was added is running. It will take some time 
         to complete. You can drill in and watch the individual actions. For now, it shows that the workflow completed successfully, 
         which means we should have a deployed app in App Service. Click stuff like "Build" or "Deploy" to see details of the run.

         (6) Let's and let's go over the Azure portal. Democt7-api-rg -->DemoConferenceApi --> Deployment Center -->
         and click Settings -->  browse to the running app right from within the Deployment Center. And when it opens, 
         https://democonferenceapi.azurewebsites.net/ append api/weatherforecast and you will see  the app that was deployed. 
        

         (7)  Now let's update this page and see how continuous integration and  deployment works. 
         Go back to Visual Studio and open  DemoConference.API. Modify the Startup.cs. Then commit and push the project
         to github to trigger the workflow. 
            - now go back to github --> Action 
            - refresh the Action page 
            - you will the workflow running or queued
            - when the workflow is running or completed, feel free to open the "Build or Deploy" steps to see what's happening or 
              happened in each step.
            - Let's  go over the Azure portal. Democt7-api-rg -->DemoConferenceApi --> Deployment Center -->
              and click Browser. You can browse to the running app right from within the Deployment Center.
     
(2). GitHub Actions are a powerful way to set up continuous deployment to Azure App Service. And with the 
     integration right in the  Azure portal, it's really easy to set up.

    
    # Quick Start for Github Actions - https://docs.github.com/en/actions/quickstart